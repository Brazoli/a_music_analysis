#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Análise das músicas
Created on Fri Mar 17 08:34:32 2017
@author: leonardosales
"""
### Pacotes
from nltk.corpus import stopwords
import nltk
#nltk.download()
from unidecode import unidecode
import numpy as np
stop = stopwords.words('portuguese')
from collections import Counter
import pandas as pd
import urllib.request as urllib  # copia paginas html


### Parte 1: Letras
    

# Tratando terminacoes de linha
df_analise_letras_amostra["letra_limpa"] = ""
df_analise_letras_amostra.loc[:,"letra_limpa"] = df_analise_letras_amostra["letra"].str.replace(",","").str.replace("  "," ").str.replace("  "," ").str.replace("  "," ").str.replace("  "," ").str.replace("|","| ").str.replace("  "," ").str.replace(" \|","|")

df_analise_letras["letra_limpa"] = ""
df_analise_letras.loc[:,"letra_limpa"] = df_analise_letras["letra"].str.replace(",","").str.replace("  "," ").str.replace("  "," ").str.replace("  "," ").str.replace("  "," ").str.replace("|","| ").str.replace("  "," ").str.replace(" \|","|")

# Removendo stop words
df_analise_letras_amostra["letra_limpa"] = df_analise_letras_amostra["letra_limpa"].str.lower().str.split()
df_analise_letras_amostra["letra_limpa_2"] = df_analise_letras_amostra["letra_limpa"].apply(lambda x: [item for item in x if item not in stop])

df_analise_letras["letra_limpa"] = df_analise_letras["letra_limpa"].str.lower().str.split()
df_analise_letras["letra_limpa_2"] = df_analise_letras["letra_limpa"].apply(lambda x: [item for item in x if item not in stop])


# Removendo acentuação
# Funcao para remover acentos
def remove_acentos(x):
    y = []
    for j in x:
        y.append(unidecode(j))
    return y
# Executando    
df_analise_letras_amostra["letra_limpa_3"] = df_analise_letras_amostra["letra_limpa_2"].map(remove_acentos)

df_analise_letras["letra_limpa_3"] = df_analise_letras["letra_limpa_2"].map(remove_acentos)

# Criando lista com as endlines e outra com terminacoes.
df_analise_letras_amostra["letra_endlines"] = df_analise_letras_amostra["letra_limpa_3"].apply(lambda x: [item for item in x if "|" in item])

def terminacoes(x):
    y = []
    for j in x:
        j = j.replace("|","").replace(".","").replace("!","").replace(";","").replace("?","")
        y.append(j[-3:])
    y = [x for x in y if x != "" and len(x) > 2]
    return y

df_analise_letras_amostra["letra_terminacoes"] = df_analise_letras_amostra["letra_endlines"].map(terminacoes)
df_analise_letras_amostra["letra_terminacoes_full"] = df_analise_letras_amostra["letra_limpa_3"].map(terminacoes)


df_analise_letras["letra_endlines"] = df_analise_letras["letra_limpa_3"].apply(lambda x: [item for item in x if "|" in item])

df_analise_letras["letra_terminacoes"] = df_analise_letras["letra_endlines"].map(terminacoes)
df_analise_letras["letra_terminacoes_full"] = df_analise_letras["letra_limpa_3"].map(terminacoes)


# Criando lista com todas as palavras da língua portuguesa
file = "preao2.txt"
lista_palavras_pt = []
for line in open(file, encoding="UTF-8"):
    lista_palavras_pt.append(unidecode(line).replace("\n",""))
    
# Criando coluna com termos da letra que constam do vocabulário em pt
def replace(x):
    y = []
    for j in x:
        j = j.replace("|","").replace(".","").replace("!","").replace(";","").replace("?","").replace("\"","").replace(")","").replace("(","").replace("\[","").replace("\]","").replace("\'","").replace(":","").replace("/","").replace("3x","").replace("2x","").replace("4x","").replace("1x","")
        y.append(j)
    y = [x for x in y if x != ""]
    return y

df_analise_letras_amostra["letra_limpa_4"] = df_analise_letras_amostra["letra_limpa_3"].map(replace)
df_analise_letras["letra_limpa_4"] = df_analise_letras["letra_limpa_3"].map(replace)


palavras = []
for i in range(0,len(df_analise_letras)):
    for j in range(0,len(df_analise_letras.iloc[i]["letra_limpa_4"])):
        palavras.append(df_analise_letras.iloc[i]["letra_limpa_4"][j])
    print(i)

palavras = list(set(palavras))
lista_palavras_pt_2 = list(set(palavras).intersection(lista_palavras_pt))
palavras_fora = list(set(palavras)-set(lista_palavras_pt_2))

def vocabulario(x):
    y = list(set(x).intersection(lista_palavras_pt_2))
    return y
 

df_analise_letras_amostra["letra_vocabulario"] = df_analise_letras_amostra["letra_limpa_4"].map(vocabulario)

df_analise_letras["letra_vocabulario"] = df_analise_letras["letra_limpa_4"].map(vocabulario)

df_analise_letras['letra_vocabulario_full'] = np.empty((len(df_analise_letras), 0)).tolist()
for i in range(0, len(df_analise_letras)):
    vocabulario = df_analise_letras.iloc[i]["letra_vocabulario"]
    letra = df_analise_letras.iloc[i]["letra_limpa_4"]
    df_analise_letras["letra_vocabulario_full"][i] = [j for j in letra if j in vocabulario]
    print(i)


# Criando colunas: qtde de palavras, palavras distintas, terminacoes, terminacoes distintas e rimas.
def tamanho_lista(x):
    return len(x)

def tamanho_lista_unicos(x):
    return len(set(x))


df_analise_letras['qtde_palavras'] = df_analise_letras['letra_vocabulario_full'].map(tamanho_lista)
df_analise_letras['qtde_palavras_distintas'] = df_analise_letras['letra_vocabulario'].map(tamanho_lista)
df_analise_letras['qtde_terminacoes_endlines'] = df_analise_letras["letra_terminacoes"].map(tamanho_lista)
df_analise_letras['qtde_terminacoes_endlines_unicas'] = df_analise_letras["letra_terminacoes"].map(tamanho_lista_unicos)
df_analise_letras['qtde_terminacoes_geral'] = df_analise_letras["letra_terminacoes_full"].map(tamanho_lista)
df_analise_letras['qtde_terminacoes_geral_unicas'] = df_analise_letras["letra_terminacoes_full"].map(tamanho_lista_unicos)
df_analise_letras["qtde_rimas_endlines"] = df_analise_letras['qtde_terminacoes_endlines'] - df_analise_letras['qtde_terminacoes_endlines_unicas']
df_analise_letras["qtde_rimas_geral"] = df_analise_letras['qtde_terminacoes_geral'] - df_analise_letras['qtde_terminacoes_geral_unicas']


# Criando lista com todas as palavras da língua inglesa
file = "english.txt"
lista_palavras_en = []
for line in open(file):
    lista_palavras_en.append(unidecode(line).replace("\n",""))

def vocabulario_en(x):
    y = list(set(x).intersection(lista_palavras_en))
    return y

# eliminando alta proporcao de ingles
df_analise_letras["letra_vocabulario_en"] = df_analise_letras["letra_limpa_4"].map(vocabulario_en)
df_analise_letras["letra_proporcao_en"] = df_analise_letras["letra_vocabulario_en"].map(tamanho_lista)/df_analise_letras["letra_limpa_4"].map(tamanho_lista)
df_analise_letras = df_analise_letras[df_analise_letras["letra_proporcao_en"] < 0.3]

# eliminando baixa proporcao de portugues, artistas em ingles, menos que 10 palavras e menos que 5 distintas
df_analise_letras["letra_proporcao_pt"] = df_analise_letras["letra_vocabulario_full"].map(tamanho_lista)/df_analise_letras["letra_limpa_4"].map(tamanho_lista)
df_analise_letras_amostra2 = df_analise_letras.iloc[:, [0,1,15,16,30,31]]
df_analise_letras_amostra2.to_csv('df_analise_letras_amostra2.csv', sep=';')
df_analise_letras_filtrado = df_analise_letras[~df_analise_letras["artista"].isin(["catolicas","high-school-musical","hinario-adventista","musicas-infantis"])]
df_analise_letras_filtrado = df_analise_letras_filtrado[df_analise_letras_filtrado["qtde_palavras"] > 9]
df_analise_letras_filtrado = df_analise_letras_filtrado[df_analise_letras_filtrado["qtde_palavras_distintas"] > 4]
df_analise_letras_filtrado = df_analise_letras_filtrado[df_analise_letras_filtrado["letra_proporcao_pt"] > 0.3999999999999999]


# Calculando o idf medio para cada letra
df_analise_letras_amostra = df_analise_letras.iloc[:100]
palavras_geral = []
for i in range(0,len(df_analise_letras_filtrado)):
    for j in range(0,len(df_analise_letras_filtrado.iloc[i]["letra_vocabulario_full"])):
        palavras_geral.append(df_analise_letras_filtrado.iloc[i]["letra_vocabulario_full"][j])
    print(i)

palavras_geral_dict = dict(Counter(palavras_geral))

def count_word(x):
    y = []    
    for j in x:
        count = palavras_geral_dict.get(j)
        y.append(count)
    return y

def count_word_intra(x):
    y = []    
    for j in x:
        count = x.count(j)
        y.append(count)
    return y

def coluna_array(x):
    y = np.asarray(x)
    return y

def array_mean(x):
    y = x.mean()
    return y

df_analise_letras_filtrado["vocabulario_full_idf"] = df_analise_letras_filtrado["letra_vocabulario_full"].map(count_word)
df_analise_letras_filtrado["vocabulario_full_tf"] = df_analise_letras_filtrado["letra_vocabulario_full"].map(count_word_intra)
df_analise_letras_filtrado["vocabulario_full_idf_array"] = df_analise_letras_filtrado["vocabulario_full_idf"].map(coluna_array)
df_analise_letras_filtrado["vocabulario_full_tf_array"] = df_analise_letras_filtrado["vocabulario_full_tf"].map(coluna_array)
df_analise_letras_filtrado["vocabulario_full_tf_idf_array"] = df_analise_letras_filtrado["vocabulario_full_tf_array"]/df_analise_letras_filtrado["vocabulario_full_idf_array"]
df_analise_letras_filtrado['vocabulario_full_tf_idf_mean'] = df_analise_letras_filtrado["vocabulario_full_tf_idf_array"].map(array_mean)

#df_analise_letras_chico = df_analise_letras[df_analise_letras['artista'] == "chico-buarque"]

### Parte 2: Cifras
# limpeza: transformando a cifra em uma lista de acordes
def str_to_list(x):
    y = x.replace("\'","").replace(" ","").replace("[","").replace("]","").split(",")
    return y

df_analise_cifras["cifra_list"] = df_analise_cifras["cifra"].map(str_to_list)

# limpeza: criando lista com toods os acordes
lista_acordes = []
for i in range(0,len(df_analise_cifras)):
    for j in range(0,len(df_analise_cifras.iloc[i]["cifra_list"])):
        lista_acordes.append(df_analise_cifras.iloc[i]["cifra_list"][j])
    print(i)

count_cifra = Counter(lista_acordes)
df_cifras_count = pd.DataFrame.from_dict(count_cifra, orient='index').reset_index()
df_cifras_count.to_csv('df_cifras_count.csv', sep=';')

# limpeza: criando lista de acordes inválidos
lista_acordes_unicos = list(set(lista_acordes))
def verifica_acorde(acorde, file):
    line_number = 0
    for line in open(file, encoding="ISO-8859-1"):
        line_number += 1
        if line_number == 125 and "understood" in line:
            invalido = acorde
            return (invalido)


lista_acordes_invalidos = [""]
for i in range(0,len(lista_acordes_unicos)):
    try:
        acorde = lista_acordes_unicos[i]
        acorde_page = ("http://jguitar.com/chordsearch?chordsearch="+acorde+"&labels=none")
        file = "acorde.txt"
        urllib.urlretrieve(acorde_page, file)
        lista_acordes_invalidos.append(verifica_acorde(acorde, file))
        percent = i*100/len(lista_acordes_unicos)
        print(percent)
    except:
        pass
    
lista_acordes_invalidos.remove(None)
lista_acordes_invalidos = [x for x in lista_acordes_invalidos if x is not None]
df_acordes_invalidos = pd.DataFrame({'invalidos': lista_acordes_invalidos})
df_acordes_invalidos.to_csv('df_acordes_invalidos.csv', sep=';')
lista_indice_acordes_invalidos
lista_acordes_invalidos_2 = []
for i in lista_indice_acordes_invalidos:
    lista_acordes_invalidos_2.append(df_cifras_count.iloc[i]["index"])
    print(i)

# limpeza: eliminando invalidos das cifras
df_analise_cifras["cifra_list_filtrada"] = df_analise_cifras["cifra_list"].apply(lambda x: [item for item in x if item not in lista_acordes_invalidos_2])

# limpeza: padronizando
def replace_cifra(x):
    y = []
    for j in x:
        j = j.replace("?","dim").replace("º","dim").replace("o","dim").replace("aum","+")
        y.append(j)
    return y

df_analise_cifras["cifra_list_padronizada"] = df_analise_cifras["cifra_list_filtrada"].map(replace_cifra)

n=0
for i in range(0,len(df_analise_cifras)):
    if len(df_analise_cifras.iloc[i]["cifra_list_padronizada"]) < 3:
        n += 1
        print(df_analise_cifras.iloc[i]["artista"]+", "+str(n)+", "+str(i))

df_analise_cifras_2 = df_analise_cifras[df_analise_cifras["cifra_list_padronizada"].str.len() > 2]



# criando colunas com métricas de cifra
df_analise_cifras_2["qtde_acordes"] = df_analise_cifras_2["cifra_list_padronizada"].map(tamanho_lista)
df_analise_cifras_2["qtde_acordes_distintos"] = df_analise_cifras_2["cifra_list_padronizada"].map(tamanho_lista_unicos)

# calculando tf-idf da cifra
acordes_geral = []
for i in range(0,len(df_analise_cifras_2)):
    for j in range(0,len(df_analise_cifras_2.iloc[i]["cifra_list_padronizada"])):
        acordes_geral.append(df_analise_cifras_2.iloc[i]["cifra_list_padronizada"][j])
    print(i)

acordes_geral_dict = dict(Counter(acordes_geral))

def count_acorde(x):
    y = []    
    for j in x:
        count = acordes_geral_dict.get(j)
        y.append(count)
    return y

def count_acorde_intra(x):
    y = []    
    for j in x:
        count = x.count(j)
        y.append(count)
    return y

df_analise_cifras_2["acordario_idf"] = df_analise_cifras_2["cifra_list_padronizada"].map(count_acorde)
df_analise_cifras_2["acordario_tf"] = df_analise_cifras_2["cifra_list_padronizada"].map(count_acorde_intra)
df_analise_cifras_2["acordario_idf_array"] = df_analise_cifras_2["acordario_idf"].map(coluna_array)
df_analise_cifras_2["acordario_tf_array"] = df_analise_cifras_2["acordario_tf"].map(coluna_array)
df_analise_cifras_2["acordario_tf_idf_array"] = df_analise_cifras_2["acordario_tf_array"]/df_analise_cifras_2["acordario_idf_array"]
df_analise_cifras_2['acordario_tf_idf_mean'] = df_analise_cifras_2["acordario_tf_idf_array"].map(array_mean)

# cifras: criando listas com acordes por campo harmonico
# ch_do_maior = ["C","Dm","Em","F","G","Am","Bm(b5)","Am7","Dm6","G7","C7M","Dm7","Em7","F7M","G7","Am7","Bm7(b5)"]
# ch_sol_maior = ["G","Am","Bm","C","D","Em","F#m(b5)","Em7","Am6","D7","G7M","Am7","Bm7","C7M","D7","Em7","F#m7(b5)"]
# ch_re_maior = ["D","Em","F#m","G","A","Bm","C#m(b5)","Bm7","Em6","A7","D7M","","Em7","F#m7","G7M","C#m7(b5)"]
# ch_la_maior = ["A","Bm","C#m","D","E","F#m","G#m(b5)","F#m7","Bm6","E7","G#m7(b5)","Bm7","C#m7"]
# ch_mi_maior = ["E","F#m","G#m","A","B","C#m","D#m(b5)","C#m7","F#m6","B7","E7M","F#m7","G#m7","A7M","C#m7","D#m(b5)"]
# ch_si_maior = ["B","C#m","D#m","E","F#","G#m","A#m(b5)","G#m7","C#m6","B7M","C#m7","D#m7","E7M","F#7","G#m7","A#m(b5)"]
# ch_fa_sus_maior = ["","","","","","","","",""]

# cifras: tamanho dos acordes
def tamanho_strings(x):
    y = []
    for j in x:
        _len = len(j)
        y.append(_len)
    return y

df_analise_cifras_2["lista_tamanho_acordes"] = df_analise_cifras_2["cifra_list_padronizada"].map(tamanho_strings)
df_analise_cifras_2["lista_tamanho_acordes_array"] = df_analise_cifras_2["lista_tamanho_acordes"].map(coluna_array)
df_analise_cifras_2['tamanho_acordes_mean'] = df_analise_cifras_2["lista_tamanho_acordes_array"].map(array_mean)

# Artistas: base consolidada de métricas 1
df_analise_artista = df_analise_letras_filtrado.groupby(["artista", "genero_ajustado"], as_index=False).agg({"nome_musica": pd.Series.nunique,
                                                                                                                              "vocabulario_full_tf_idf_mean": "mean",
                                                                                                                              "qtde_palavras": "mean",
                                                                                                                              "qtde_palavras_distintas": "mean"})
df_analise_cifras_2_agrupado = df_analise_cifras_2.groupby(["artista"], as_index=False).agg({"qtde_acordes": "mean",
                                                                                              "qtde_acordes_distintos": "mean",
                                                                                              "acordario_tf_idf_mean": "mean",
                                                                                              "tamanho_acordes_mean": "mean",
                                                                                              })

df_analise_artista = pd.merge(df_analise_artista, df_analise_cifras_2_agrupado, on='artista', how='inner')
df_analise_artista["perc_acordes_distintos"] = df_analise_artista["qtde_acordes_distintos"]/df_analise_artista["qtde_acordes"]
df_analise_artista["perc_palavras_distintas"] = df_analise_artista["qtde_palavras_distintas"]/df_analise_artista["qtde_palavras"]
df_analise_artista["soma_tf_idf"] = df_analise_artista["acordario_tf_idf_mean"] + df_analise_artista["vocabulario_full_tf_idf_mean"]

# Artistas: criando acordario completo e vocabulario completo
# Vocabulario completo
lista_vocabularios = []
n = 0
for artista in list(df_analise_artista["artista"]):
   n += 1
   lista_artista = []
   for i in range(0,len(df_analise_letras_filtrado[df_analise_letras_filtrado['artista'] == artista])):
       lista_artista = lista_artista + df_analise_letras_filtrado[df_analise_letras_filtrado['artista'] == artista].iloc[i]["letra_vocabulario_full"]
   lista_vocabularios.append((artista,) + tuple([lista_artista]))
   print(n)

df_artista_vocabularios = pd.DataFrame.from_records(lista_vocabularios, columns=["artista","vocabulario_completo"])
            
            
# Acordario completo
lista_acordarios = []
n = 0
for artista in list(df_analise_artista["artista"]):
   n += 1
   lista_artista = []
   for i in range(0,len(df_analise_cifras_2[df_analise_cifras_2['artista'] == artista])):
       lista_artista = lista_artista + df_analise_cifras_2[df_analise_cifras_2['artista'] == artista].iloc[i]["cifra_list_padronizada"]
   lista_acordarios.append((artista,) + tuple([lista_artista]))
   print(n)

df_artista_acordarios = pd.DataFrame.from_records(lista_acordarios, columns=["artista","acordario_completo"])         
            
# Novas metricas
df_analise_artista = pd.merge(pd.merge(df_analise_artista, df_artista_vocabularios, on='artista', how='inner'), df_artista_acordarios, on='artista', how='inner')
df_analise_artista['qtde_palavras_vocabulario_completo'] = df_analise_artista["vocabulario_completo"].map(tamanho_lista)
df_analise_artista['qtde_palavras_unicas_vocabulario_completo'] = df_analise_artista["vocabulario_completo"].map(tamanho_lista_unicos)
df_analise_artista['qtde_acordes_acordario_completo'] = df_analise_artista["acordario_completo"].map(tamanho_lista)
df_analise_artista['qtde_acordes_unicas_acordario_completo'] = df_analise_artista["acordario_completo"].map(tamanho_lista_unicos)
df_analise_artista["artista_perc_palavras_distintas"] = df_analise_artista["qtde_palavras_unicas_vocabulario_completo"]/df_analise_artista["qtde_palavras_vocabulario_completo"]
df_analise_artista["artista_perc_acordes_distintos"] = df_analise_artista["qtde_acordes_unicas_acordario_completo"]/df_analise_artista["qtde_acordes_acordario_completo"]

df_analise_artista["lista_tamanho_acordes_completo"] = df_analise_artista["acordario_completo"].map(tamanho_strings)
df_analise_artista["lista_tamanho_acordes_completo_array"] = df_analise_artista["lista_tamanho_acordes_completo"].map(coluna_array)
df_analise_artista['tamanho_acordes_completo_mean'] = df_analise_artista["lista_tamanho_acordes_completo_array"].map(array_mean)


df_analise_artista["artista_vocabulario_completo_idf"] = df_analise_artista["vocabulario_completo"].map(count_word)
df_analise_artista["artista_vocabulario_completo_tf"] = df_analise_artista["vocabulario_completo"].map(count_word_intra)
df_analise_artista["artista_vocabulario_completo_idf_array"] = df_analise_artista["artista_vocabulario_completo_idf"].map(coluna_array)
df_analise_artista["artista_vocabulario_completo_tf_array"] = df_analise_artista["artista_vocabulario_completo_tf"].map(coluna_array)
df_analise_artista["artista_vocabulario_completo_tf_idf_array"] = df_analise_artista["artista_vocabulario_completo_tf_array"]/df_analise_artista["artista_vocabulario_completo_idf_array"]
df_analise_artista['artista_vocabulario_completo_tf_idf_mean'] = df_analise_artista["artista_vocabulario_completo_tf_idf_array"].map(array_mean)


df_analise_artista["artista_acordario_completo_idf"] = df_analise_artista["acordario_completo"].map(count_acorde)
df_analise_artista["artista_acordario_completo_tf"] = df_analise_artista["acordario_completo"].map(count_acorde_intra)
df_analise_artista["artista_acordario_completo_idf_array"] = df_analise_artista["artista_acordario_completo_idf"].map(coluna_array)
df_analise_artista["artista_acordario_completo_tf_array"] = df_analise_artista["artista_acordario_completo_tf"].map(coluna_array)
df_analise_artista["artista_acordario_completo_tf_idf_array"] = df_analise_artista["artista_acordario_completo_tf_array"]/df_analise_artista["artista_acordario_completo_idf_array"]
df_analise_artista['artista_acordario_completo_tf_idf_mean'] = df_analise_artista["artista_acordario_completo_tf_idf_array"].map(array_mean)


# Ajustes
list(df_analise_artista)
df_analise_artista_resumo = df_analise_artista.iloc[:, [0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,24,30]]
df_analise_artista = df_analise_artista[~df_analise_artista["artista"].isin(['corinhos-evangelicos', 'dominio-publico', 'israel-e-rodolffo', 'bambakere', 'morais-do-acordeon', 'almir-bezerra', 'sepultura', 'nomad', 'angra', 'paulinho-natureza', 'rappervil', 'ricardo-braga', 'terrasamba', 'matogrosso-e-mathias', 'marconi-branco', 'salomao-do-reggae', 'cagerio-de-souza', 'paralamas-do-sucesso', 'kelvin-do-acordeom', 'brenda-lee'])]
df_analise_artista.set_value(273, 'genero_ajustado', "MPB")
df_analise_artista_resumo = df_analise_artista.iloc[:, [0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,24,30,31,32,35]]

# Novas metricas (escala 0-1)
list(df_analise_artista_resumo)
df_analise_artista_resumo.rename(columns = {'nome_musica':'qtde_musicas'}, inplace = True)
df_analise_artista_resumo["qtde_musicas_escala"] = (df_analise_artista_resumo["qtde_musicas"]-min(df_analise_artista_resumo["qtde_musicas"]))/(max(df_analise_artista_resumo["qtde_musicas"])-min(df_analise_artista_resumo["qtde_musicas"]))
df_analise_artista_resumo["qtde_palavras_vocabulario_completo_escala"] = (df_analise_artista_resumo["qtde_palavras_vocabulario_completo"]-min(df_analise_artista_resumo["qtde_palavras_vocabulario_completo"]))/(max(df_analise_artista_resumo["qtde_palavras_vocabulario_completo"])-min(df_analise_artista_resumo["qtde_palavras_vocabulario_completo"]))
df_analise_artista_resumo["qtde_palavras_unicas_vocabulario_completo_escala"] = (df_analise_artista_resumo["qtde_palavras_unicas_vocabulario_completo"]-min(df_analise_artista_resumo["qtde_palavras_unicas_vocabulario_completo"]))/(max(df_analise_artista_resumo["qtde_palavras_unicas_vocabulario_completo"])-min(df_analise_artista_resumo["qtde_palavras_unicas_vocabulario_completo"]))
df_analise_artista_resumo["artista_perc_palavras_distintas_escala"] = (df_analise_artista_resumo["artista_perc_palavras_distintas"]-min(df_analise_artista_resumo["artista_perc_palavras_distintas"]))/(max(df_analise_artista_resumo["artista_perc_palavras_distintas"])-min(df_analise_artista_resumo["artista_perc_palavras_distintas"]))
df_analise_artista_resumo["artista_vocabulario_completo_tf_idf_mean_escala"] = (df_analise_artista_resumo["artista_vocabulario_completo_tf_idf_mean"]-min(df_analise_artista_resumo["artista_vocabulario_completo_tf_idf_mean"]))/(max(df_analise_artista_resumo["artista_vocabulario_completo_tf_idf_mean"])-min(df_analise_artista_resumo["artista_vocabulario_completo_tf_idf_mean"]))


df_analise_artista_resumo["qtde_acordes_acordario_completo_escala"] = (df_analise_artista_resumo["qtde_acordes_acordario_completo"]-min(df_analise_artista_resumo["qtde_acordes_acordario_completo"]))/(max(df_analise_artista_resumo["qtde_acordes_acordario_completo"])-min(df_analise_artista_resumo["qtde_acordes_acordario_completo"]))
df_analise_artista_resumo["qtde_acordes_unicas_acordario_completo_escala"] = (df_analise_artista_resumo["qtde_acordes_unicas_acordario_completo"]-min(df_analise_artista_resumo["qtde_acordes_unicas_acordario_completo"]))/(max(df_analise_artista_resumo["qtde_acordes_unicas_acordario_completo"])-min(df_analise_artista_resumo["qtde_acordes_unicas_acordario_completo"]))
df_analise_artista_resumo["artista_perc_acordes_distintos_escala"] = (df_analise_artista_resumo["artista_perc_acordes_distintos"]-min(df_analise_artista_resumo["artista_perc_acordes_distintos"]))/(max(df_analise_artista_resumo["artista_perc_acordes_distintos"])-min(df_analise_artista_resumo["artista_perc_acordes_distintos"]))
df_analise_artista_resumo["tamanho_acordes_completo_mean_escala"] = (df_analise_artista_resumo["tamanho_acordes_completo_mean"]-min(df_analise_artista_resumo["tamanho_acordes_completo_mean"]))/(max(df_analise_artista_resumo["tamanho_acordes_completo_mean"])-min(df_analise_artista_resumo["tamanho_acordes_completo_mean"]))
df_analise_artista_resumo["artista_acordario_completo_tf_idf_mean_escala"] = (df_analise_artista_resumo["artista_acordario_completo_tf_idf_mean"]-min(df_analise_artista_resumo["artista_acordario_completo_tf_idf_mean"]))/(max(df_analise_artista_resumo["artista_acordario_completo_tf_idf_mean"])-min(df_analise_artista_resumo["artista_acordario_completo_tf_idf_mean"]))

df_analise_artista_resumo["score_artista_cifra"] =  df_analise_artista_resumo["qtde_acordes_unicas_acordario_completo_escala"] + df_analise_artista_resumo["artista_perc_acordes_distintos_escala"] + df_analise_artista_resumo["tamanho_acordes_completo_mean_escala"] + df_analise_artista_resumo["artista_acordario_completo_tf_idf_mean_escala"]

df_analise_artista_resumo["score_artista_letra"] = df_analise_artista_resumo["qtde_musicas_escala"] + df_analise_artista_resumo["qtde_palavras_unicas_vocabulario_completo_escala"] + df_analise_artista_resumo["artista_perc_palavras_distintas_escala"] + df_analise_artista_resumo["artista_vocabulario_completo_tf_idf_mean_escala"]

df_analise_artista_resumo["score_artista_final"] = df_analise_artista_resumo["score_artista_cifra"] + df_analise_artista_resumo["score_artista_letra"]




    

